#!/bin/bash

set -euo pipefail

run () {
    echo "+" "$@" 1>&2
    "$@"
}

usage () {
    cat <<EOF
Usage: $0 <create|configure|validate|destroy|full-cycle> [provider]

  Runner script for all the stages necessary to test an Ansible playbook.

    create:     spins up a VM using [provider] (default virtualbox)
    update:     refresh the local Ansible roles from ./requirements.yml
    configure:  runs ansible in local mode on the VM using ./playbook.yml
    validate:   runs serverspec tests in ./serverspec against the VM
    destroy:    destroys the VM
    full-cycle: destroy, create, update, configure, validate, and destroy

  Behind the scenes this is a vagrant box, so you should be able to log in using
  "vagrant ssh" if there is an issue.

  Currently, the only supported provider is virtualbox.

EOF
}

if [[ $# -lt 1 ]]; then
    usage
    exit 1
fi

PROVIDER=${2:-virtualbox}
COMMAND=$1

create () {
    run vagrant up --provider "$PROVIDER" --no-provision
}

update () {
    run rm -rf roles/*
    run ansible-galaxy -p roles -r requirements.yml install -v -f
}

configure () {
    run vagrant provision --provision-with ansible_local
}

validate () {
    run vagrant provision --provision-with serverspec
}

destroy () {
    if vagrant status | grep "not created" > /dev/null; then
        echo "Vagrant box not created, not running destroy" 1>&2
    else
        run vagrant destroy -f
    fi
}

full-cycle () {
    run destroy
    run create
    run update
    run configure
    run validate
    run destroy
}

if ! vagrant plugin list | grep vagrant-serverspec > /dev/null; then
    echo "Installing test dependencies..."
    # https://github.com/vvchik/vagrant-serverspec
    vagrant plugin install vagrant-serverspec
fi

case $PROVIDER in
    virtualbox)
        ;;
    *)
        echo "Unrecognized provider: $PROVIDER"
        usage
        exit 1
        ;;
esac

case $COMMAND in
    create)
        create
        ;;
    update)
        update
        ;;
    configure)
        configure
        ;;
    validate)
        validate
        ;;
    destroy)
        destroy
        ;;
    full-cycle)
        full-cycle
        ;;
    *)
        echo "Unrecognized command: $COMMAND"
        usage
        exit 1
        ;;
esac
